global ImageIds {
  in-out property <[image]> images_by_index: [
      @image-url("icons/tile008.png"),
      @image-url("icons/tile011.png"),
      @image-url("icons/tile017.png"),
      @image-url("icons/tile148.png"),
      @image-url("icons/tile031.png"), // 4 is none found
  ];
}

export enum InputCommand { 
  Direction, Position,
 } 

struct TileGraphics {
  image_ids: [int],
}

component MapTile inherits Rectangle {
  callback clicked();

  in property <[int]> image_ids;

  in property <int> grid_x;
  in property <int> grid_y;

  in property <length> size;

  x: grid_x * size;
  y: grid_y * size;
  width: size;
  height: size;

  for id[i] in image_ids : Image {
      source: ImageIds.images_by_index[id];
      width: parent.width;
      height: parent.height;
  }

  TouchArea {
      clicked => {
          root.clicked();
      }
  }
}

export component MainWindow inherits Window {
  width: 1280px;
  height: 720px;

  callback received_input(InputCommand, int, int);

  in property <length> tile_size;
  in property <int> grid_width;
  in property <int> grid_height;

  in property <[TileGraphics]> memory_tiles;

  for tile[i] in memory_tiles : MapTile {
    grid_x: mod(i, grid_width);
    grid_y: floor(i / grid_width);
    size: tile_size;

    image_ids: tile.image_ids;

    clicked => {
      root.received-input(InputCommand.Position, self.grid_x, self.grid_y);
    }
  }

  keyboard_handler := FocusScope {
    key-pressed(event) => {
      if (event.text == "w") {

        received-input(InputCommand.Direction, 0, -1);

      } else if (event.text == "a") {

        received-input(InputCommand.Direction, -1, 0);

      } else if (event.text == "s") {

        received-input(InputCommand.Direction, 0, 1);

      } else if (event.text == "d") {

        received-input(InputCommand.Direction, 1, 0);
      }
      accept
    }
  }
}
