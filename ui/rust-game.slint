import { VerticalBox, HorizontalBox, Button, ProgressIndicator } from "std-widgets.slint";
global TileImages {
  in-out property <[image]> images_by_index: [
      @image-url("icons/tile008.png"), // 0:
      @image-url("icons/tile011.png"),
      @image-url("icons/tile017.png"),
      @image-url("icons/tile148.png"),
      @image-url("icons/tile031.png"), // starry space
      @image-url("icons/tile035.png"), // 5:
      @image-url("icons/tile165.png"), // weird doggo
      @image-url("icons/tile032.png"), // closed chest
      @image-url("icons/tile033.png"), // opened chest
      @image-url("icons/tile025.png"), // closed door
      @image-url("icons/tile025d.png"), // 10: opened "door"
      @image-url("icons/tile166.png"), // the heavy
      @image-url("icons/tile151.png"), // the pew pew
      @image-url("icons/tile178.png"), // the pew pew pet
      @image-url("icons/tile130.png"), // random corpse
      @image-url("icons/tile121.png"), // 15: gold pile
      @image-url("icons/tile013.png"), // stairs down
      @image-url("icons/tile027.png"), // spikes
      @image-url("icons/simplefire.png"), // open flame
      @image-url("icons/burning.png"), // sparks
      @image-url("icons/tile152.png"), // 20 little rat
      @image-url("icons/tile153.png"), // little bugs
      @image-url("icons/tile160.png"), // big mushrooms
      @image-url("icons/tile163.png"), // bat
      @image-url("icons/tile030.png"), // acid
  ];
}

global IconImages {
  in-out property <[image]> images_by_index: [
      @image-url("icons/icon27.png"),           // 0: invis
      @image-url("icons/icon27b.png"),          //
      @image-url("icons/paladin/Icon12.png"),   // levitate
      @image-url("icons/paladin/Icon12b.png"),  //
      @image-url("icons/paladin/Icon2.png"),    // heal
      @image-url("icons/paladin/Icon2b.png"),   // 5:
      @image-url("icons/paladin/Icon8.png"),    // stoneskin
      @image-url("icons/paladin/Icon8b.png"),   // 
      @image-url("icons/paladin/Icon35.png"),   // resist fire
      @image-url("icons/paladin/Icon35b.png"),  // 
      @image-url("icons/icon21.png"),   // 10: flaming fist
      @image-url("icons/icon21b.png"),  // 
      @image-url("icons/icon31.png"),   // weaken armor
      @image-url("icons/icon31b.png"),  // 
      
  ];
}


export enum InputCommand { 
  Direction, Position, Shoot, Wait, Quit, Restart, LevelUp, Descend, CloseDoors, Start, Spell,
 } 

struct TileGraphics {
  image_ids: [int],
}

component MapTile inherits Rectangle {
  callback clicked();
  callback right-clicked();

  in property <TileGraphics> images;

  in property <int> grid_x;
  in property <int> grid_y;

  in property <length> size;

  x: grid_x * size;
  y: grid_y * size;
  width: size;
  height: size;

  for id[i] in images.image_ids : Image {
      source: TileImages.images_by_index[id];
      width: parent.width;
      height: parent.height;
      z: 0;
  }

  TouchArea {
    pointer-event(PointerEvent) => {
      if (PointerEvent.kind != PointerEventKind.down) {
        return;
      }
      if (PointerEvent.button == PointerEventButton.right) {
        root.right-clicked();
      } else  if (PointerEvent.button == PointerEventButton.left) {
        root.clicked();
      }
    }
  }
}

component GameMap inherits Rectangle {
  in property <int> grid_width;
  in property <int> grid_height;
  in property <length> tile_size;
  in property <bool> select-mode;

  in property <[TileGraphics]> memory_tiles;

  callback received_input(InputCommand, int, int);
  

  x: 0;
  y: 0;
  height: grid_height * tile-size;
  width: grid_width * tile-size;

  for tile[i] in memory_tiles : MapTile {
    grid_x: mod(i, grid_width);
    grid_y: floor(i / grid_width);
    size: tile_size;

    images: tile;

    clicked => {
      root.received-input(InputCommand.Position, self.grid_x, self.grid_y)
    }
    right-clicked => {
      root.received-input(InputCommand.Shoot, self.grid_x, self.grid_y);
    }
  }
  
  
}

component SpellIcon inherits Rectangle {
  callback clicked();
  in property <int> image;
  in property <int> spell_pos;
  in property <string> spell_name;

  in property <int> grid_x;
  in property <int> grid_y;

  in property <length> size;
  in property <color> text-color;
  property <length> my-padding: 8px;

  x: grid_x * size + grid_x * my-padding;
  y: grid_y * size + grid_y * my-padding * 2;
  width: size;
  height: size + my-padding;

  Image {
      source: IconImages.images_by_index[image];
      width: parent.width;
      height: parent.height - my-padding;

      TouchArea {
        
        pointer-event(PointerEvent) => {
          if (PointerEvent.kind != PointerEventKind.down) {
            return;
          }
          if (PointerEvent.button == PointerEventButton.left) {
            root.clicked();
          }
        }
    }
  }
  
  Text {
    width: parent.width + my-padding;
    height: my-padding * 2;
    x: -my-padding/2;
    y: size + self.height/4;
    text: spell_name;
    color: text-color;
    horizontal-alignment: center;
  }
  
}

component SpellInventory inherits Rectangle {
  in property <int> grid_width;
  in property <length> tile_size;

  in property <[int]> spell_icons;
  in property <[string]> spell_names;

  callback received_input(InputCommand, int, int);

  for image[i] in spell_icons : SpellIcon {
    grid_x: mod(i, grid_width);
    grid_y: floor(i / grid_width);
    size: tile_size;

    image: image;
    spell_pos: i;
    spell_name: spell_names[i];
    text-color: #B8CD55;

    clicked => {
      root.received-input(InputCommand.Spell, self.spell_pos, 0);
    }
  }
}


component StatsDisplay inherits Rectangle {
  in property <string> character-name;
  in property <int> level;
  in property <int> depth;
  in property <int> current-hp;
  in property <int> max-hp;
  in property <int> coins;
  in property <int> current-xp;
  in property <int> max-xp;
  in property <int> strength;
  in property <int> dexterity;
  in property <int> melee-min-damage;
  in property <int> melee-max-damage;
  in property <int> ranged-min-damage;
  in property <int> ranged-max-damage;
  in property <float> melee-crit-chance;
  in property <float> ranged-crit-chance;
  in property <[int]> spell_icons;
  in property <[string]> spell_names;
  
  callback received_input(InputCommand, int, int);

  VerticalLayout {
    spacing: 4px;
    // Name
    Rectangle {
      name := Text {
        horizontal-alignment: left;
        width: 100%;
        color: #B8CD55;
        font-size: 14pt;
        text: root.character-name;

      }
    }
    // Level 
    Rectangle {
      HorizontalLayout {
        level := Text {
          horizontal-alignment: left;
          width: 50%;
          color: #B8CD55;
          font-size: 14pt;
          text: "Level " + root.level;
        }
        Text {
          width: 50%;
          color: #B8CD55;
          font-size: 14pt;
          text: "Depth " + root.depth;
        }
      }
      
    }
    // HP bar
    Rectangle {
      HorizontalLayout {
        Text {
          width: 25%;
          color: #B8CD55;
          font-size: 14pt;
          text: "HP";
        }
        Text {
          width: 50%;
          color: #B8CD55;
          font-size: 14pt;
          text: current-hp + " / " + max-hp;
        }
      }
    }
    Rectangle {
      HorizontalLayout {
        ProgressIndicator {
          height: 10pt;
          width: 100%;
          progress: current-hp / max-hp;
        }
      }
    }
    // XP bar
    Rectangle {
      HorizontalLayout {
        Text {
          width: 25%;
          color: #B8CD55;
          font-size: 14pt;
          text: "XP";
        }
        Text {
          width: 50%;
          color: #B8CD55;
          font-size: 14pt;
          text: current-xp + " / " + max-xp;
        }
      }
    }
    Rectangle {
      HorizontalLayout {
        ProgressIndicator {
          height: 10pt;
          width: 80%;
          progress: current-xp / max-xp;
        }
      }
    }
    // Wealth
    Rectangle {
      coins := Text {
        horizontal-alignment: left;
        width: 100%;
        color: #B8CD55;
        font-size: 14pt;
        text: "Coins: " + root.coins;
      }
    }
    Rectangle {
      height: 2%;
    }
    // Stats
    Rectangle {
      strength := Text {
        horizontal-alignment: left;
        width: 100%;
        color: #B8CD55;
        font-size: 14pt;
        text: "Strength: " + root.strength;
      }
    }
    Rectangle {
      dexterity := Text {
        horizontal-alignment: left;
        width: 100%;
        color: #B8CD55;
        font-size: 14pt;
        text: "Dexterity: " + root.dexterity;
      }
    }
    Rectangle {
      height: 2%;
    }
    Rectangle {
      melee-title := Text {
        horizontal-alignment: left;
        width: 100%;
        color: #B8CD55;
        font-size: 14pt;
        text: "Melee Attack: " + root.melee-min-damage + "-" + root.melee-max-damage;
      }
    }
    Rectangle {
      Text {
        horizontal-alignment: left;
        width: 100%;
        color: #B8CD55;
        font-size: 12pt;
        text: "Crit chance: " + root.melee-crit-chance;
      }
    }
    Rectangle {
      height: 2%;
    }
    Rectangle {
      ranged-title := Text {
        horizontal-alignment: left;
        width: 100%;
        color: #B8CD55;
        font-size: 14pt;
        text: "Ranged Attack: " + root.ranged-min-damage + "-" + root.ranged-max-damage;
      }
      
    }
    Rectangle {
      Text {
        horizontal-alignment: left;
        width: 100%;
        color: #B8CD55;
        font-size: 12pt;
        text: "Crit chance: " + ranged-crit-chance;
      }
    }
    Rectangle {height: 5%; }
    SpellInventory {
      tile-size: 48px;
      grid_width: 4;
      spell_icons: root.spell_icons;
      spell_names: root.spell_names;

      received_input(command, x, y,) => {
        root.received_input(command, x, y);
      }
    }
    // Empty space below
    Rectangle {height: 5%; }
  }
}


component TextLog inherits Rectangle {

  background: #B8CD55;
  border-color: #69903B;

  border-width: 4px;

  text_box := Text {
    x: parent.border-width + 2px; 
    y: parent.border-width + 2px;
    height: parent.height - (parent.border-width + 2px) * 2;
    horizontal-alignment: left;
    vertical-alignment: top;

    font-size: 12pt;
  }

  public function display_message(msg: string) {
    text-box.text = msg + "\n" + text-box.text;
  }
}

component PopUpBox inherits Rectangle {
  in property <TextHorizontalAlignment> text-alignment;
  in property <string> text;
  in property <length> text-box-height;

  background: #B8CD55;
  border-color: #69903B;

  border-width: 4px;

  text_box := Text {
    x: parent.border-width + 16px; 
    y: parent.border-width + 2px;

    height: text-box-height;
    width: parent.width - (parent.border-width + 16px) * 2;

    horizontal-alignment: text-alignment;
    vertical-alignment: center;

    text: text;
    font-size: 16pt;
    wrap: word-wrap;
  }
  
}

export component MainWindow inherits Window {
  background: #204631;

  width: grid-width * tile-size * 1.25;
  height: grid-height * tile-size * 1.25;

  callback received_input(InputCommand, int, int);

  // Map data
  in property <length> tile_size;
  in property <int> grid_width;
  in property <int> grid_height;
  in property <int> depth;

  // Game data
  in property <[TileGraphics]> memory_tiles;
  in property <string> character-name;
  in property <int> player-level;
  in property <int> player-coins;
  in property <int> player-health-current;
  in property <int> player-health-max;
  in property <int> player-xp-current;
  in property <int> player-xp-goal;
  in property <int> player-strength;
  in property <int> player-dexterity;
  in property <int> player-cunning;
  in property <[int]> player-melee-damage;
  in property <[int]> player-ranged-damage;
  in property <float> player-melee-crit;
  in property <float> player-ranged-crit;
  in property <[int]> spell_icons;
  in property <[string]> spell_names;

  // Level up data
  in-out property <int> level_up_spell_id;
  in-out property <string> level_up_spell_name;
  in-out property <int> level_up_spell_image;

  // UI state
  in-out property <bool> keyboard_enabled: true;
  in property <bool> select-mode: true;

  HorizontalBox {
    VerticalBox {
      padding: 0;
      map :=GameMap { 
        tile-size: root.tile_size;
        grid_height: root.grid_height;
        grid_width: root.grid_width;
        select-mode: root.select-mode;
    
        memory_tiles: root.memory_tiles;
    
        received_input(command, x, y,) => {
          root.received_input(command, x, y);
        }
      }
    
      message_log := TextLog {}
    }
    stats := StatsDisplay {
      depth: root.depth;
      character-name: root.character-name;
      level: player-level;
      coins: player-coins;
      current-hp: player-health-current;
      max-hp: player-health-max;
      current-xp: player-xp-current;
      max-xp: player-xp-goal;
      
      strength: player-strength;
      dexterity: player-dexterity;

      melee-min-damage: player-melee-damage[0];
      melee-max-damage: player-melee-damage[1];
      melee-crit-chance: player-melee-crit;

      ranged-min-damage: player-ranged-damage[0];
      ranged-max-damage: player-ranged-damage[1];
      ranged-crit-chance: player-ranged-crit;

      spell_icons: root.spell_icons;
      spell_names: root.spell_names;

      received_input(command, x, y,) => {
        root.received_input(command, x, y);
      }
    }
  }

  intro-popup := PopupWindow {
    padding-top: 24px;
    padding: 12px;
    close-on-click: false;

    width: 128px * 2.8;
    height: 128px * 3.5;

    x: map.width / 2 - 128px * 1.4;
    y: map.height / 2 - 128px * 1.75;

    PopUpBox {
      text: "You move on WASD.\n\nRight click an enemy to shoot.\nPress c to open/close doors.\nDescend on >.\n\nStrengh favors melee.\nDexterity favours ranged.\n\nYou won't heal until you level up.\n\nBeware the cultists.";
      text-box-height: 16px * 22;
      text-alignment: left;

      GridLayout {
        spacing: 8px;
        Row { Rectangle {} }
        Row {
          Rectangle { height: 25%; width: 15%;}
          Rectangle {
            height: 25%;
  
            ok := Button {

              text: "Start";
              clicked => { 
                root.received_input(InputCommand.Start, 0, 0); 
                root.close_popups();
              }
            }
          }
          Rectangle { height: 25%; width: 15%;}
        }
      }
    }
  }

  death-popup := PopupWindow {
    padding: 12px;
    close-on-click: false;

    width: 128px * 2;
    height: 64px * 2;

    x: map.width / 2 - 128px;
    y: map.height / 2 - 64px;

    PopUpBox {
      text: "You have died!";
      text-box-height: 64px;
      text-alignment: center;

      GridLayout {
        spacing: 4px;
        Row { Rectangle {} }
        Row {
          Rectangle { height: 60%; width: 15%;}
          Rectangle {
            height: 60%;
  
            new-game := Button {
              //width: 24px;

              text: "New Game";
              clicked => { 
                root.received_input(InputCommand.Restart, 0, 0);
                root.close_popups();
              }
            }
          }
          Rectangle {
            height: 60%;
  
            quit := Button {
              //width: 24px;

              text: "Quit";
              clicked => { 
                root.received_input(InputCommand.Quit, 0, 0); 
                root.close_popups();
              }
            }
          }
          Rectangle { height: 60%; width: 15%;}
        }
      }
    }
  }

  level-up-popup := PopupWindow {

    padding: 12px;
    close-on-click: false;

    width: 128px * 2;
    height: 128px * 2;

    x: map.width / 2 - 128px;
    y: map.height / 2 - 128px;

    PopUpBox {
      text: "You have leveled up!";
      text-box-height: 64px;
      text-alignment: center;

      GridLayout {
        spacing: 4px;
        // Empty space at top
        Row { Rectangle { height: 25%;} }
        // Strength option
        Row {
          Rectangle { width: 15%;}
          Rectangle {
            Button {
              text: "Strength up";
              clicked => {
                // Adjust Strength (0) by positive 1
                root.received_input(InputCommand.LevelUp, 0, 1);
                root.close_popups();
              }
            }
          }
          Rectangle { width: 15%;}
        }
        // Dexterity option
        Row {
          Rectangle { width: 15%;}
          Rectangle {
            Button {
              text: "Dexterity up";
              clicked => {
                // Adjust Dexterity (1) by positive 1
                root.received_input(InputCommand.LevelUp, 1, 1);
                root.close_popups();
              }
            }
  
          }
          Rectangle { width: 15%;}
        }
        // Spell option
        Row {
          Rectangle { width: 15%;}
          Rectangle {
            SpellIcon {
              spell_name: root.level_up_spell_name;
              image: root.level_up_spell_image;
              size: 48px;
              grid_x: 1;
              text-color: Colors.black;
              clicked => {

                root.received_input(InputCommand.LevelUp, 2, root.level_up_spell_id);
                root.close_popups();
              }
            }
  
          }
          Rectangle { width: 15%;}
        }
        Row { Rectangle { height: 15%;} }
      }
    }
  }

  keyboard_handler := FocusScope {

    key-pressed(event) => {
      if (event.text == "w" && parent.keyboard_enabled) {
        received-input(InputCommand.Direction, 0, -1);
      } else if (event.text == "a" && parent.keyboard_enabled) {
        received-input(InputCommand.Direction, -1, 0);
      } else if (event.text == "s" && parent.keyboard_enabled) {
        received-input(InputCommand.Direction, 0, 1);
      } else if (event.text == "d" && parent.keyboard_enabled) {
        received-input(InputCommand.Direction, 1, 0);
      } else if (event.text == " " && parent.keyboard_enabled) {
        received-input(InputCommand.Wait, 0, 0);
      } else if (event.text == ">" && parent.keyboard_enabled) {
        received-input(InputCommand.Descend, 0, 0);
      } else if (event.text == "c" && parent.keyboard_enabled) {
        received-input(InputCommand.CloseDoors, 0, 0);
      }
      accept
    }
  }

  public function display_message(msg: string) {
    message-log.display_message(msg);
  }

  public function display_death_popup() {
    self.keyboard_enabled = false;
    death-popup.show();
  }

  public function display_level_up_popup(spell_id: int, spell_name: string, spell_image: int) {
    self.keyboard_enabled = false;
    self.level_up_spell_id = spell_id;
    self.level_up_spell_name = spell_name;
    self.level_up_spell_image = spell_image;
    level-up-popup.show();
  }

  public function display_intro_popup() {
    self.keyboard_enabled = false;
    intro-popup.show();
  }

  public function close_popups() {
    level-up-popup.close();
    death-popup.close();
    self.keyboard_enabled = true;
  }
}
